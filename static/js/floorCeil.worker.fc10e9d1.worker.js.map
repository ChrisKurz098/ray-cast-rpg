{"version":3,"file":"static/js/floorCeil.worker.fc10e9d1.worker.js","mappings":"AAEAA,UAAY,SAAyBC,GAEjC,IAAI,OAACC,EAAM,OAAEC,EAAM,OAAEC,EAAM,SAAEC,EAAQ,SAAEC,EAAQ,EAAGC,EAAC,EAAEC,GAAMP,EAAEQ,KAE7DN,EAAOO,SAAST,IAEZ,GAAIA,EAAEU,OACF,OAAO,EACJ,CAEH,MAAMC,EA2ClB,SAAoBA,EAAUC,EAAOC,GACjC,MAAMC,EAAOF,EAAQC,EACrB,OAAOF,EAAWI,KAAKC,IAAIF,GA7CFG,CAAWjB,EAAEW,SAAUX,EAAEY,MAAOX,EAAOW,OAClDM,EAAaH,KAAKI,MAAOd,EAAWM,EAAYV,EAAOmB,UACvDC,EAAOrB,EAAEsB,GACTC,EAAOR,KAAKI,MAAMb,EAAI,EAAIY,EAAa,GAGvCM,EAAOT,KAAKU,IAAKzB,EAAEY,MAAQX,EAAOW,OAGxC,IAAK,IAAIc,EAFIH,EAAOL,EAECQ,GAAOpB,EAAGoB,IAAO,CAClC,MAAMC,EAAID,EAAMpB,EAAI,EAEdsB,EADO3B,EAAQ,EAAI0B,EAAI1B,EAAOmB,SACjBL,KAAKC,IAAIQ,GAC5B,IAAIK,EAAK5B,EAAO4B,EAAId,KAAKC,IAAIhB,EAAEY,OAASgB,EACpCE,EAAK7B,EAAO6B,EAAIf,KAAKgB,IAAI/B,EAAEY,OAASgB,EACxCC,GAASxB,EAAW,EACpByB,GAASzB,EAAW,EAGpB,IAAI2B,EAA4B,GAApB,EAAQzB,EAAIc,GACxB,MAAMY,EAAwB,GAAV,GAAN,EAAWH,GAEnBI,EAAQN,EAAK,EAEnBzB,EAAOK,KAAKwB,GAAO5B,EAAS6B,GAAKC,EACjC/B,EAAOK,KAAKwB,EAAM,GAAK5B,EAAS6B,EAAM,GAAGC,EACzC/B,EAAOK,KAAKwB,EAAM,GAAK5B,EAAS6B,EAAM,GAAGC,EACzC/B,EAAOK,KAAKwB,EAAM,GAAK,IAEvBA,EAAgC,IAAvB1B,EAAIoB,GAAOnB,EAAIc,GACxBlB,EAAOK,KAAKwB,GAAO5B,EAAS6B,GAAKC,EACjC/B,EAAOK,KAAKwB,EAAM,GAAK5B,EAAS6B,EAAM,GAAGC,EACzC/B,EAAOK,KAAKwB,EAAM,GAAK5B,EAAS6B,EAAM,GAAGC,EACzC/B,EAAOK,KAAKwB,EAAM,GAAK,SAKnCG,YAAYhC","sources":["scripts/game/floorCeil.worker.js"],"sourcesContent":["\n\nonmessage = function renderFloorCeil(e) {\n\n    let {player, buffer, strips, tileData, tileSize,  h, w } = e.data;\n\n    buffer.forEach((e) => {\n        //if the current element has a 'sprite' key, its an object\n        if (e.sprite) {\n            return false; //render the object\n        } else {\n            //if not an object render the slice of wall\n            const distance = fixFishEye(e.distance, e.angle, player.angle);\n            const wallHeight = Math.floor((tileSize / distance) * player.projDist);\n            const xPos = e.sx;\n            const yPos = Math.floor(h / 2 - wallHeight / 2);\n\n            //----draw floor?----//\n            const Beta = Math.abs((e.angle - player.angle));\n            const yRow = yPos + wallHeight;\n\n            for (let row = yRow; row <= h; row++) {\n                const r = row - h / 2;\n                const sld = (player.z) / r * player.projDist;\n                const dist = sld / Math.cos(Beta);\n                let x = (player.x + Math.cos(e.angle) * dist)\n                let y = (player.y + Math.sin(e.angle) * dist);\n                x = x & (tileSize - 1);\n                y = y & (tileSize - 1);\n\n                //get teature positions\n                let inx = (((row) * w + xPos) * 4);\n                const tnx = (((x) * 32 + y) * 4);\n         \n                const shade = dist/3 ;\n                //floor\n                strips.data[inx] = tileData[tnx]-shade;\n                strips.data[inx + 1] = tileData[tnx + 1]-shade;\n                strips.data[inx + 2] = tileData[tnx + 2]-shade;\n                strips.data[inx + 3] = 255;\n                //ceilings\n                inx = (((h - row) * w + xPos) * 4);\n                strips.data[inx] = tileData[tnx]-shade;\n                strips.data[inx + 1] = tileData[tnx + 1]-shade;\n                strips.data[inx + 2] = tileData[tnx + 2]-shade;\n                strips.data[inx + 3] = 255;\n            }\n        }\n\n    })\n    postMessage(strips);\n}\n\n\n\nfunction fixFishEye(distance, angle, playerAngle) {\n    const diff = angle - playerAngle;\n    return distance * Math.cos(diff);\n}"],"names":["onmessage","e","player","buffer","strips","tileData","tileSize","h","w","data","forEach","sprite","distance","angle","playerAngle","diff","Math","cos","fixFishEye","wallHeight","floor","projDist","xPos","sx","yPos","Beta","abs","row","r","dist","x","y","sin","inx","tnx","shade","postMessage"],"sourceRoot":""}